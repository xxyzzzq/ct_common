//===----- ct_common/file_parse/ct_parser.qx ------------------*- bison -*-===//
//
//                      The ct_common Library
//
// This file is distributed under the MIT license. See LICENSE for details.
//
//===----------------------------------------------------------------------===//
//
// This file contains the parser for assembling SUT models from tokens
//
//===----------------------------------------------------------------------===//

%defines
%locations
%debug
%error-verbose
%skeleton "lalr1.cc"
%define parser_class_name "ct_parser"
%lex-param {ct::lexer  &qlex}
%parse-param {ct::lexer  &qlex}
%parse-param {std::vector<boost::shared_ptr<ct::common::ParamSpec> > &param_specs}
%parse-param {std::vector<ct::common::Strength> &strengths}
%parse-param {std::vector<boost::shared_ptr<ct::common::Seed> > &seeds}
%parse-param {std::vector<boost::shared_ptr<ct::common::Constraint> > &constraints}
%parse-param {ct::common::Assembler &assembler}

%code top {
#include <string>
#include <sstream>
#include <vector>
#include <cstdlib>
#include <ct_common/file_parse/ct_lexer.hpp>
using namespace ct::common;
}

%code requires {
#include <ct_common/common/constraints.h>
#include <ct_common/common/exps.h>
#include <ct_common/common/paramspecs.h>
#include <ct_common/common/seed.h>
#include <ct_common/common/tuple.h>
#include <ct_common/file_parse/assembler.h>
}

%union {
  ct::common::TreeNode *tree_node;
  std::string *str;
  std::vector<boost::shared_ptr<ct::common::ParamSpec> > *vec_param_spec;
  std::vector<std::string> *vec_str;
  std::vector<boost::shared_ptr<ct::common::TreeNode> > *vec_exp;
  std::vector<std::pair<boost::shared_ptr<ct::common::TreeNode>, boost::shared_ptr<ct::common::TreeNode> > > *vec_auto_value_cases;
  std::pair<boost::shared_ptr<ct::common::TreeNode>, boost::shared_ptr<ct::common::TreeNode> > *auto_value_case;
  ct::common::PVPair *pvpair;
  ct::common::Tuple *tuple;
}

%code {
#define TRY_BEGIN try {
#define TRY_END } catch (std::exception &e) { error(yyloc, e.what()); }

static yy::ct_parser::token_type
  yylex(yy::ct_parser::semantic_type* yylval, 
        yy::ct_parser::location_type* yylloc,
        ct::lexer &qlex);

static std::string gen_yylloc_str(const yy::ct_parser::location_type &loc, const std::string &s) {
  std::stringstream ss;
  ss << loc.begin.line << ":" << loc.begin.column << "-" << loc.end.line << ":" << loc.end.column << ": " << s;
  return ss.str();
}
}

%token TKN_PARAMETERS_START     "[PARAMETERS]"
%token TKN_STRENGTHS_START      "[STRENGTHS]"
%token TKN_SEEDS_START          "[SEEDS]"
%token TKN_CONSTRAINTS_START    "[CONSTRAINTS]"
%token TKN_OPTIONS_START        "[OPTIONS]"
%token <str> TKN_TYPE           "type specifier"
%token <str> TKN_IDENTIFIER     "parameter name"
%token <str> TKN_VAL_STRING     "string value"
%token <str> TKN_VAL_DOUBLE     "double value"
%token <str> TKN_VAL_INTEGER    "integer value"
%token <str> TKN_VAL_BOOL       "bool value"

%token TKN_PARAM_AUX    "__aux__"
%token TKN_PARAM_AUTO   "__auto__"
%token TKN_SEED_STARTER "__starter__"
%token TKN_DEFAULT      "default"

%token TKN_INVALID      "#"
%token TKN_INVALIDATION "##"
%token <str> TKN_EQ           "=="
%token <str> TKN_NE           "!="
%token <str> TKN_GT           '>'
%token <str> TKN_GE           ">="
%token <str> TKN_LT           '<'
%token <str> TKN_LE           "<="
%token TKN_AND          "&&"
%token TKN_OR           "||"
%token TKN_XOR          "^^"
%token TKN_IMPLY        "->"
%token TKN_IFF          "<->"
%token TKN_NOT          '!'
%token TKN_ADD          '+'
%token TKN_SUB          '-'
%token TKN_MULT         '*'
%token TKN_DIV          '/'
%token TKN_MOD          '%'
%token TKN_BRACKET_O    '('
%token TKN_BRACKET_C    ')'
%token TKN_COLON        ':'
%token TKN_SEMICOLON    ';'
%token TKN_COMMA        ','
%token TKN_CORNER_BRACKET_O  '['
%token TKN_CORNER_BRACKET_C  ']'
%token TKN_CURLY_BRACKET_O   '{'
%token TKN_CURLY_BRACKET_C   '}'
%token TKN_END 0 "end of file"

%left TKN_AND TKN_OR TKN_XOR
%left TKN_IMPLY TKN_IFF
%left TKN_EQ TKN_NE
%left TKN_GT TKN_GE TKN_LT TKN_LE
%left TKN_ADD TKN_SUB
%left TKN_MULT TKN_DIV TKN_MOD
%right TKN_NEG TKN_UPLUS TKN_NOT

%type <vec_exp> ps_set ps_values range
%type <tree_node> value ps_value range_int_val
%type <tree_node> value_s value_i neg_value_i value_d neg_value_d value_b
%type <vec_str> param_list param_list_item
%type <vec_param_spec> parameters_line
%type <vec_auto_value_cases> auto_value_cases
%type <auto_value_case> auto_value_case

%type <pvpair> tuple_item
%type <tuple> tuple
%type <tree_node> tree_obj;
%% /* Grammar rules and actions follow. */

input: sections {
  std::vector<boost::shared_ptr<Constraint> > ivld_constrs = assembler.dump_invalidations(param_specs);
  constraints.insert(constraints.end(), ivld_constrs.begin(), ivld_constrs.end());
};

sections: section
  | sections section;

section: parameters_section
  | strengths_section
  | seeds_section
  | constraints_section
  | options_section;

parameters_section: TKN_PARAMETERS_START
  | parameters_section parameters_line {
    param_specs.insert(param_specs.end(), $2->begin(), $2->end());
    delete $2;
  };

// no null-pointer checking
parameters_line:
  TKN_TYPE param_list TKN_SEMICOLON
  {
    $$ = new std::vector<boost::shared_ptr<ParamSpec> >();
    for (std::size_t i = 0; i < $2->size(); ++i) {
      TRY_BEGIN
      if (find_param_id(param_specs, (*$2)[i]) != PID_BOUND) {
        assembler.reportWarning(gen_yylloc_str(yylloc, (std::string("parameter redefinition of ") + (*$2)[i]).c_str()));
        continue;
      }
      ParamSpec *param_spec = assembler.asm_paramspec(*$1, (*$2)[i], std::vector<boost::shared_ptr<TreeNode> >());
      if (param_spec == 0) {
        assembler.reportWarning(gen_yylloc_str(yylloc, (std::string("cannot assemble parameter ") + (*$2)[i]).c_str()));
        continue;
      }
      $$->push_back(boost::shared_ptr<ParamSpec>(param_spec));
      TRY_END
    }
    delete $1; delete $2;
  }
  | TKN_TYPE param_list TKN_COLON ps_set TKN_SEMICOLON
  {
    $$ = new std::vector<boost::shared_ptr<ParamSpec> >();
    for (std::size_t i = 0; i < $2->size(); ++i) {
      TRY_BEGIN
      if (find_param_id(param_specs, (*$2)[i]) != PID_BOUND) {
        assembler.reportWarning(gen_yylloc_str(yylloc, (std::string("parameter redefinition of ") + (*$2)[i]).c_str()));
        continue;
      }
      ParamSpec *param_spec = assembler.asm_paramspec(*$1, (*$2)[i], *$4);
      if (param_spec == 0) {
        assembler.reportWarning(gen_yylloc_str(yylloc, (std::string("cannot assemble parameter ") + (*$2)[i]).c_str()));
        continue;
      }
      $$->push_back(boost::shared_ptr<ParamSpec>(param_spec));
      TRY_END
    }
    delete $1; delete $2; delete $4;
  }
  | TKN_PARAM_AUX TKN_TYPE param_list TKN_SEMICOLON
  {
    $$ = new std::vector<boost::shared_ptr<ParamSpec> >();
    for (std::size_t i = 0; i < $3->size(); ++i) {
      TRY_BEGIN
      if (find_param_id(param_specs, (*$3)[i]) != PID_BOUND) {
        assembler.reportWarning(gen_yylloc_str(yylloc, (std::string("parameter redefinition of ") + (*$3)[i]).c_str()));
        continue;
      }
      ParamSpec *param_spec = assembler.asm_paramspec(*$2, (*$3)[i], std::vector<boost::shared_ptr<TreeNode> >());
      if (param_spec == 0) {
        assembler.reportWarning(gen_yylloc_str(yylloc, (std::string("cannot assemble parameter ") + (*$3)[i]).c_str()));
        continue;
      }
      $$->push_back(boost::shared_ptr<ParamSpec>(param_spec));
      TRY_END
    }
    delete $2; delete $3;
  }
  | TKN_PARAM_AUX TKN_TYPE param_list TKN_COLON ps_set TKN_SEMICOLON
  {
    $$ = new std::vector<boost::shared_ptr<ParamSpec> >();
    for (std::size_t i = 0; i < $3->size(); ++i) {
      TRY_BEGIN
      if (find_param_id(param_specs, (*$3)[i]) != PID_BOUND) {
        assembler.reportWarning(gen_yylloc_str(yylloc, (std::string("parameter redefinition of ") + (*$3)[i]).c_str()));
        continue;
      }
      ParamSpec *param_spec = assembler.asm_paramspec(*$2, (*$3)[i], *$5);
      if (param_spec == 0) {
        assembler.reportWarning(gen_yylloc_str(yylloc, (std::string("cannot assemble parameter ") + (*$3)[i]).c_str()));
        continue;
      }
      param_spec->set_aux(true);
      $$->push_back(boost::shared_ptr<ParamSpec>(param_spec));
      TRY_END
    }
    delete $2; delete $3; delete $5;
  }
  | TKN_PARAM_AUTO TKN_TYPE param_list TKN_COLON tree_obj TKN_SEMICOLON
  {
    $$ = new std::vector<boost::shared_ptr<ParamSpec> >();
    TRY_BEGIN
    std::vector<std::pair<boost::shared_ptr<TreeNode>, boost::shared_ptr<TreeNode> > > auto_value_cases;
    Constraint_L_CBool *ctrue = new Constraint_L_CBool();
    ctrue->set_value(true);
    auto_value_cases.push_back(std::pair<boost::shared_ptr<TreeNode>, boost::shared_ptr<TreeNode> >(boost::shared_ptr<TreeNode>(ctrue), boost::shared_ptr<TreeNode>($5)));
    for (std::size_t i = 0; i < $3->size(); ++i) {
      TRY_BEGIN
      if (find_param_id(param_specs, (*$3)[i]) != PID_BOUND) {
        CT_EXCEPTION((std::string("parameter redefinition of ") + (*$3)[i]).c_str());
      }
      ParamSpec *param_spec = assembler.asm_paramspec(*$2, (*$3)[i], auto_value_cases);
      $$->push_back(boost::shared_ptr<ParamSpec>(param_spec));
      TRY_END
    }
    TRY_END
    delete $2; delete $3;
  }
  | TKN_PARAM_AUTO TKN_TYPE param_list TKN_COLON TKN_CURLY_BRACKET_O auto_value_cases TKN_CURLY_BRACKET_C TKN_SEMICOLON
  {
    $$ = new std::vector<boost::shared_ptr<ParamSpec> >();
    TRY_BEGIN
    for (std::size_t i = 0; i < $3->size(); ++i) {
      TRY_BEGIN
      if (find_param_id(param_specs, (*$3)[i]) != PID_BOUND) {
        CT_EXCEPTION((std::string("parameter redefinition of ") + (*$3)[i]).c_str());
      }
      ParamSpec *param_spec = assembler.asm_paramspec(*$2, (*$3)[i], *$6);
      $$->push_back(boost::shared_ptr<ParamSpec>(param_spec));
      TRY_END
    }
    TRY_END
    delete $2; delete $3; delete $6;
  };

auto_value_cases: auto_value_case
  {
    $$ = new std::vector<std::pair<boost::shared_ptr<TreeNode>, boost::shared_ptr<TreeNode> > >();
    if ($1) {
      $$->push_back(*$1);
    }
    delete $1;
  }
  | auto_value_cases TKN_COMMA auto_value_case
  {
    $$ = $1;
    if ($1) {
      $$->push_back(*$3);
    }
    delete $3;
  };

auto_value_case: tree_obj TKN_COLON tree_obj {
    $$ = 0;
    TRY_BEGIN
    // no type check, the second tree_obj can be Exp or Constraint
    $$ = new std::pair<boost::shared_ptr<TreeNode>, boost::shared_ptr<TreeNode> >(boost::shared_ptr<TreeNode>($1), boost::shared_ptr<TreeNode>($3));
    TRY_END
  }
  | TKN_DEFAULT TKN_COLON tree_obj {
    TRY_BEGIN
    boost::shared_ptr<Constraint_L_CBool> c_true(new Constraint_L_CBool());
    c_true->set_value(true);
    $$ = new std::pair<boost::shared_ptr<TreeNode>, boost::shared_ptr<TreeNode> >(c_true, boost::shared_ptr<TreeNode>($3));
    TRY_END
  }
;

// no null-pointer checking
ps_set: ps_values { $$ = $1; }
  | ps_set TKN_COMMA ps_values { $$ = $1; if ($3) { $$->insert($$->end(), $3->begin(), $3->end()); delete $3; } };

ps_values: range { $$ = $1; }
  | ps_value { $$ = new std::vector<boost::shared_ptr<TreeNode> >(); if ($1) { $$->push_back(boost::shared_ptr<TreeNode>($1)); } };

ps_value: value_s { $$ = $1; }
  | value_i { $$ = $1; }
  | value_d { $$ = $1; }
  | value_b { $$ = $1; }
  | neg_value_i { $$ = $1; }
  | neg_value_d { $$ = $1; };

neg_value_i: TKN_SUB value_i {
    TYPE_ASSERT($2, Exp_A_CInt*);
    Exp_A_CInt *exp = dynamic_cast<Exp_A_CInt *>($2);
    exp->set_value(-exp->get_value());
    exp->set_str_value(std::string("-")+exp->get_str_value());
    $$ = exp;
  };

neg_value_d: TKN_SUB value_d {
      TYPE_ASSERT($2, Exp_A_CDouble*);
    Exp_A_CDouble *exp = dynamic_cast<Exp_A_CDouble *>($2);
    exp->set_value(-exp->get_value());
    exp->set_str_value(std::string("-")+exp->get_str_value());
    $$ = exp;
  };

range: TKN_CORNER_BRACKET_O range_int_val TKN_COMMA range_int_val TKN_CORNER_BRACKET_C
  {
    TRY_BEGIN
    TYPE_ASSERT($2, Exp_A_CInt*);
    TYPE_ASSERT($4, Exp_A_CInt*);
    int val_begin = dynamic_cast<Exp_A_CInt*>($2)->get_value();
    int val_end = dynamic_cast<Exp_A_CInt*>($4)->get_value();
    int step = (val_begin <= val_end) ? 1 : -1;
    $$ = new std::vector<boost::shared_ptr<TreeNode> >();
    for (int val = val_begin; val <= val_end; val += step) {
      Exp_A_CInt *exp = new Exp_A_CInt();
      exp->set_value(val);
      std::stringstream ss;
      ss << val;
      exp->set_str_value(ss.str());
      exp->set_type(EAT_INT);
      $$->push_back(boost::shared_ptr<TreeNode>(exp));
    }
    TRY_END
    delete $2;
    delete $4;
  }
  | TKN_CORNER_BRACKET_O range_int_val TKN_COMMA range_int_val TKN_COLON range_int_val TKN_CORNER_BRACKET_C
  {
    TRY_BEGIN
    TYPE_ASSERT($2, Exp_A_CInt*);
    TYPE_ASSERT($4, Exp_A_CInt*);
    TYPE_ASSERT($6, Exp_A_CInt*);
    int val_begin = dynamic_cast<Exp_A_CInt*>($2)->get_value();
    int val_end = dynamic_cast<Exp_A_CInt*>($4)->get_value();
    int step = dynamic_cast<Exp_A_CInt*>($6)->get_value();
    $$ = new std::vector<boost::shared_ptr<TreeNode> >();
    int sign = (step > 0) ? 1 : -1;
    for (int val = val_begin; sign * (val - val_end) <= 0; val += step) {
      Exp_A_CInt *exp = new Exp_A_CInt();
      exp->set_value(val);
      std::stringstream ss;
      ss << val;
      exp->set_str_value(ss.str());
      exp->set_type(EAT_INT);
      $$->push_back(boost::shared_ptr<TreeNode>(exp));
    }
    TRY_END
    delete $2;
    delete $4;
    delete $6;
  };
range_int_val: value_i { $$ = $1; }
  | neg_value_i { $$ = $1; }

value: value_s { $$ = $1; }
  | value_i { $$ = $1; }
  | value_d { $$ = $1; };
  | value_b { $$ = $1; }

// no null-pointer checking
value_s: TKN_VAL_STRING {
    Exp_S_CString *exp = new Exp_S_CString();
    exp->set_value(*$1);
    $$ = exp;
    delete $1;
  };

// no null-pointer checking
value_d: TKN_VAL_DOUBLE {
    Exp_A_CDouble *tmp = new Exp_A_CDouble();
    tmp->set_value(atof($1->c_str()));
    tmp->set_str_value(*$1);
    tmp->set_type(EAT_DOUBLE);
    $$ = tmp;
    delete $1;
  };

// no null-pointer checking
value_i: TKN_VAL_INTEGER {
    Exp_A_CInt *tmp = new Exp_A_CInt();
    tmp->set_value(atoi($1->c_str()));
    tmp->set_str_value(*$1);
    tmp->set_type(EAT_INT);
    $$ = tmp;
    delete $1;
  };

value_b: TKN_VAL_BOOL {
    TRY_BEGIN
    $$ = assembler.asm_constraint_l_cbool(*$1);
    TRY_END
    delete $1;
};

strengths_section: TKN_STRENGTHS_START
  | strengths_section strengths_line;

// no null-pointer checking
strengths_line: param_list TKN_COLON TKN_VAL_INTEGER TKN_SEMICOLON
  {
    TRY_BEGIN assembler.attach_strengths(param_specs, *$1, strengths, atoi($3->c_str())); TRY_END
    delete $1; delete $3;
  }
  | TKN_DEFAULT TKN_COLON TKN_VAL_INTEGER TKN_SEMICOLON {
    TRY_BEGIN assembler.attach_default_strengths(param_specs, strengths, atoi($3->c_str())); TRY_END
    delete $3;
  };

// no null-pointer checking
param_list: param_list_item { $$ = $1; }
  | param_list TKN_COMMA param_list_item { $$ = $1; $$->insert($$->end(), $3->begin(), $3->end()); delete $3; };

// no null-pointer checking
param_list_item: TKN_IDENTIFIER { $$ = new std::vector<std::string>(); $$->push_back(*$1); delete $1; }
  | TKN_IDENTIFIER TKN_CURLY_BRACKET_O TKN_VAL_INTEGER TKN_SUB TKN_VAL_INTEGER TKN_CURLY_BRACKET_C {
    // only positive integers are allowed in the subscript
    $$ = new std::vector<std::string>();
    for (int i = atoi($3->c_str()); i <= atoi($5->c_str()); ++i) {
      std::ostringstream ss;
      ss << *$1 << i;
      $$->push_back(ss.str());
    }
  };

seeds_section: TKN_SEEDS_START
  | seeds_section seeds_line;

// no null-pointer checking
seeds_line: tuple TKN_SEMICOLON {
    Seed *seed = assembler.asm_seed(seeds.size(), *$1);
    seeds.push_back(boost::shared_ptr<Seed>(seed));
    delete $1; }
  | TKN_SEED_STARTER tuple TKN_SEMICOLON {
    Seed *seed = assembler.asm_seed(seeds.size(), *$2);
    seed->set_is_starter(true);
    seeds.push_back(boost::shared_ptr<Seed>(seed));
    delete $2; }
  | tree_obj TKN_SEMICOLON {
    TRY_BEGIN
    TYPE_ASSERT($1, Constraint*);
    Seed *seed = assembler.asm_seed(seeds.size(), (Constraint*)$1);  // $1 is stored in the seed, don't delete!!
    seeds.push_back(boost::shared_ptr<Seed>(seed));
    TRY_END }
  | TKN_SEED_STARTER tree_obj TKN_SEMICOLON {
    TRY_BEGIN
    TYPE_ASSERT($2, Constraint*);
    Seed *seed = assembler.asm_seed(seeds.size(), (Constraint*)$2);  // $2 is stored in the seed, don't delete!!
    seed->set_is_starter(true);
    seeds.push_back(boost::shared_ptr<Seed>(seed));
    TRY_END };

tuple: tuple_item {
    $$ = new Tuple();
    if ($1) {
      $$->push_back(*$1);
      delete $1;
    } else {
      assembler.reportWarning(gen_yylloc_str(yylloc, "neglected bad pvpair"));
    }
  }
  | tuple TKN_COMMA tuple_item {
    $$ = $1;
    if ($3) {
      $$->push_back(*$3);
      delete $3;
    } else {
      assembler.reportWarning(gen_yylloc_str(yylloc, "neglected null pvpair"));
    }
  };

tuple_item: TKN_IDENTIFIER TKN_COLON ps_value { $$ = 0; TRY_BEGIN $$ = assembler.asm_pvpair(param_specs, *$1, $3); TRY_END delete $1; delete $3; };

constraints_section: TKN_CONSTRAINTS_START
  | constraints_section constraints_line;

constraints_line: tree_obj TKN_SEMICOLON { TRY_BEGIN TYPE_ASSERT($1, Constraint*); Constraint *tmp = dynamic_cast<Constraint *>($1); constraints.push_back(boost::shared_ptr<Constraint>(tmp)); TRY_END }
  | tree_obj TKN_INVALIDATION TKN_BRACKET_O param_list TKN_BRACKET_C TKN_SEMICOLON { TRY_BEGIN assembler.store_invalidation(param_specs, *$4, boost::shared_ptr<TreeNode>($1)); TRY_END } ;

tree_obj:
  // arithmetic & string & boolean relations
    tree_obj TKN_EQ tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_constraint_asb($1, $3, OP_EQ, *$2); TRY_END delete $2; }
  | tree_obj TKN_NE tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_constraint_asb($1, $3, OP_NE, *$2); TRY_END delete $2; }
  | tree_obj TKN_GT tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_constraint_asb($1, $3, OP_GT, *$2); TRY_END delete $2; }
  | tree_obj TKN_GE tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_constraint_asb($1, $3, OP_GE, *$2); TRY_END delete $2; }
  | tree_obj TKN_LT tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_constraint_asb($1, $3, OP_LT, *$2); TRY_END delete $2; }
  | tree_obj TKN_LE tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_constraint_asb($1, $3, OP_LE, *$2); TRY_END delete $2; }
  // logical relations
  | tree_obj TKN_AND tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_constraint_l($1, $3, OP_AND); TRY_END }
  | tree_obj TKN_OR tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_constraint_l($1, $3, OP_OR); TRY_END }
  | tree_obj TKN_IMPLY tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_constraint_l($1, $3, OP_IMPLY); TRY_END }
  | tree_obj TKN_IFF tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_constraint_l($1, $3, OP_IFF); TRY_END }
  | tree_obj TKN_XOR tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_constraint_l($1, $3, OP_XOR); TRY_END }
  | TKN_NOT tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_constraint_l($2, OP_NOT); TRY_END }
  // arithmetic & string operators
  | tree_obj TKN_ADD tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_exp_a($1, $3, OP_ADD); TRY_END }
  | tree_obj TKN_SUB tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_exp_a($1, $3, OP_SUB); TRY_END }
  | tree_obj TKN_MULT tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_exp_a($1, $3, OP_MULT); TRY_END }
  | tree_obj TKN_DIV tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_exp_a($1, $3, OP_DIV); TRY_END }
  | tree_obj TKN_MOD tree_obj { $$ = 0; TRY_BEGIN $$ = assembler.asm_exp_a($1, $3, OP_MOD); TRY_END }
  | TKN_SUB tree_obj %prec TKN_NEG { $$ = 0; TRY_BEGIN $$ = assembler.asm_exp_a($2, OP_NEG); TRY_END }
  | TKN_ADD tree_obj %prec TKN_UPLUS { $$ = 0; TRY_BEGIN $$ = assembler.asm_exp_a($2, OP_UPLUS); TRY_END }
  // other rules
  | TKN_IDENTIFIER { $$ = 0; TRY_BEGIN $$ = assembler.asm_param(param_specs, *$1); delete $1; TRY_END }
  | value { $$ = $1; }
  | TKN_TYPE TKN_BRACKET_O tree_obj TKN_BRACKET_C { $$ = 0; TRY_BEGIN $$ = assembler.asm_exp_a_cast($3, *$1); TRY_END delete $1; }
  | TKN_BRACKET_O tree_obj TKN_BRACKET_C { $$ = $2; }
  | TKN_INVALID TKN_BRACKET_O TKN_IDENTIFIER TKN_BRACKET_C { $$ = 0; TRY_BEGIN $$ = assembler.asm_constraint_invalid(param_specs, *$3); TRY_END };

options_section: TKN_OPTIONS_START
  | options_section options_line;

options_line: TKN_IDENTIFIER TKN_COLON value TKN_SEMICOLON { TRY_BEGIN assembler.set_option(*$1,$3); TRY_END delete $1; delete $3; };

%%

#include <iostream>
yy::ct_parser::token_type
yylex(yy::ct_parser::semantic_type *yylval, yy::ct_parser::location_type *yylloc, ct::lexer &qlex) {
  ct::lexer_Token* token;
  qlex.receive(&token);
  if (token->get_text().length()>0)
  {
    yylval->str = new std::string((char *)token->get_text().c_str());
    yylloc->step();
    yylloc->end.line = token->line_number();
    yylloc->end.column = token->column_number()+token->get_text().length();
  }
  return (yy::ct_parser::token_type)token->type_id();
}

void yy::ct_parser::error(const yy::ct_parser::location_type &loc, const std::string &s) {
  std::stringstream ss;
  ss << loc.begin.line << ":" << loc.begin.column << "-" << loc.end.line << ":" << loc.end.column << ": " << s;
  assembler.reportError(ss.str());
}
